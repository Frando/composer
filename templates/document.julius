var documentTransactionsR = '@{DocumentTransactionsR docid}';

function init (linearData) {
  window.documentModel = new ve.dm.DocumentNode( linearData );
  window.surfaceModel = new ve.dm.Surface( window.documentModel );
  window.surfaceView = new ve.es.Surface( $( '#es-editor' ), window.surfaceModel );
  window.toolbarView = new ve.ui.Toolbar( $( '#es-toolbar' ), window.surfaceView );
  window.contextView = new ve.ui.Context( window.surfaceView );
  window.surfaceModel.select( new ve.Range( 1, 1 ) );

  /*
   * This code is responsible for switching toolbar into floating mode when scrolling (with
   * keyboard or mouse).
   */
  var $toolbarWrapper = $( '#es-toolbar-wrapper' ),
    $toolbar = $( '#es-toolbar' ),
    $window = $( window ),
    MAX_OFFSET = 40;
  $window.scroll( function() {
    var toolbarWrapperOffset = $toolbarWrapper.offset();
    if ($window.scrollTop() + MAX_OFFSET >= toolbarWrapperOffset.top) {
      $toolbar.addClass('es-toolbar-fixed');
    } else {
      $toolbar.removeClass('es-toolbar-fixed');
    }
  } );

  var $modeButtons = $( '.es-modes-button' ),
    $panels = $( '.es-panel' ),
    $base = $( '#es-base' ),
    currentMode = null,
    modes = {
      'wikitext': {
        '$': $( '#es-mode-wikitext' ),
        '$panel': $( '#es-panel-wikitext' ),
        'update': function() {
          this.$panel.text(
            ve.dm.WikitextSerializer.stringify( documentModel.getPlainObject() )
          );
        }
      },
      'json': {
        '$': $( '#es-mode-json' ),
        '$panel': $( '#es-panel-json' ),
        'update': function() {
          this.$panel.text( ve.dm.JsonSerializer.stringify( documentModel.getPlainObject(), {
            'indentWith': '  '
          } ) );
        }
      },
      'html': {
        '$': $( '#es-mode-html' ),
        '$panel': $( '#es-panel-html' ),
        'update': function() {
          this.$panel.text(
            ve.dm.HtmlSerializer.stringify( documentModel.getPlainObject() )
          );
        }
      },
      'render': {
        '$': $( '#es-mode-render' ),
        '$panel': $( '#es-panel-render' ),
        'update': function() {
          this.$panel.html(
            ve.dm.HtmlSerializer.stringify( documentModel.getPlainObject() )
          );
        }
      },
      'history': {
        '$': $( '#es-mode-history' ),
        '$panel': $( '#es-panel-history' ),
        'update': function() {
          var history = surfaceModel.getHistory(),
            i = history.length,
            end = Math.max( 0, i - 25 ),
            j,
            k,
            ops,
            events = '',
            z = 0,
            operations;
            
          while ( --i >= end ) {
            z++;
            operations = [];
            for ( j = 0; j < history[i].stack.length; j++) {
              ops = history[i].stack[j].getOperations().slice(0);
              for ( k = 0; k < ops.length; k++ ) {
                var data = ops[k].data || ops[k].length;
                if ( ve.isArray( data ) ) {
                  data = data[0];
                  if ( ve.isArray( data ) ) {
                    data = data[0];
                  }
                }
                if ( typeof data !== 'string' && typeof data !== 'number' ) {
                  data = '-';
                }
                ops[k] = ops[k].type.substr( 0, 3 ) + '(' + data + ')';
              }
              operations.push('[' + ops.join( ', ' ) + ']');
            }
            events += '<div' + (z === surfaceModel.undoIndex ? ' class="es-panel-history-active"' : '') + '>' + operations.join(', ') + '</div>';
          }
          
          this.$panel.html( events );
        }
      },
      'help': {
        '$': $( '#es-mode-help' ),
        '$panel': $( '#es-panel-help' ),
        'update': function() {}
      }
    };
  $.each( modes, function( name, mode ) {
    mode.$.click( function() {
      var disable = $(this).hasClass( 'es-modes-button-down' );
      var visible = $base.hasClass( 'es-showData' );
      $modeButtons.removeClass( 'es-modes-button-down' );
      $panels.hide();
      if ( disable ) {
        if ( visible ) {
          $base.removeClass( 'es-showData' );
          $window.resize();
        }
        currentMode = null;
      } else {
        $(this).addClass( 'es-modes-button-down' );
        mode.$panel.show();
        if ( !visible ) {
          $base.addClass( 'es-showData' );
          $window.resize();
        }
        mode.update.call( mode );
        currentMode = mode;
      }
    } );
  } );

  surfaceModel.on( 'transact', function(transaction) {
    if (fromOtherClient) { return; }
    console.log("User edited document", transaction);
    transaction.clientId = clientId;
    $.post(documentTransactionsR, JSON.stringify(transaction), 'json');
    if ( currentMode ) {
      currentMode.update.call( currentMode );
    }
  } );
  surfaceModel.on( 'select', function() {
    if ( currentMode === modes.history ) {
      currentMode.update.call( currentMode );
    }
  } );

  $( '#es-docs' ).css( { 'visibility': 'visible' } );
  $( '#es-base' ).css( { 'visibility': 'visible' } );
}

$(document).ready( function() {
  window.clientId = 'client' + Math.floor(Math.random() * 10000);
  window.fromOtherClient = false;

  window.src = new EventSource(documentTransactionsR);
  src.onmessage = function (msg) {
    var data = JSON.parse(msg.data);
    if (data.clientId !== clientId) {
      if (!data.operations) {
        if (!window.surfaceModel) {
          init(data);
        }
      } else if (window.surfaceModel) {
        // transaction from other client
        var transaction = new ve.dm.Transaction();
        console.log("Received transaction", transaction);
        transaction.lengthDifference = data.lengthDifference;
        transaction.operations = data.operations;
        fromOtherClient = true;
        //surfaceModel.transact(transaction);
        fromOtherClient = false;
      }
    }
  };
} );
